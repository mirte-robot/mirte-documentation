# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
from datetime import date
sys.path.insert(0, os.path.abspath('./_modules/mirte-python/mirte_robot/'))
import sphinx_rtd_theme
import subprocess
# -- Project information -----------------------------------------------------

# The custom footer template uses this copyright information, but overrides
# the author information.
project = u'MIRTE Documentation'
author = "MIRTE team"
copyright = '&#169; Copyright ' + str(date.today().year) + ' Delft University of Technology, CC BY 4.0.'
html_show_sphinx = False

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u'v0.1'
smv_latest_version = 'main'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx_rtd_theme', 'sphinx-prompt', 'sphinx_tabs.tabs', 'sphinx.ext.autosectionlabel', 'sphinxcontrib.spelling', 'sphinx.ext.autodoc', 'sphinx.ext.napoleon', 'sphinx_multiversion', 'sphinx_mdinclude', "sphinxcontrib.jquery"]
suppress_warnings = ['autosectionlabel.*']
sphinx_tabs_disable_tab_closing = True
spelling_word_list_filename='spelling_wordlist.txt'
napoleon_google_docstring = True
napoleon_use_param = True
napoleon_use_ivar = True

# Ignore python warnings about missing ROS (msgs) libs
autodoc_mock_imports = ["rclpy", "yaml", "rcl_interfaces", "mirte_msgs", "singleton", "controller_manager_msgs"]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store', '*env', 'README.md', '_modules']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {
    '**': [
        'versioning.html',
    ],
}
smv_tag_whitelist = r'^.*$' # all
smv_branch_whitelist = r'^$' # none


# -- Skip certain autodoc functions
def skip_member(app, what, name, obj, skip, options):
    # Skip all functions named "internal_method"
    if name in ["createRobot", "singleton"]:
        return True
    return skip

def setup(app):
    app.connect("autodoc-skip-member", skip_member)



# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'MirteDocumentationdoc'


html_context = {
  'display_github': True,
  'github_user': 'mirte-robot',
  'github_repo': 'mirte-documentation',
  'github_version': 'main/',
}
# Try to update from git
try:
    output = subprocess.check_output(["git ls-remote --get-url origin"], shell=True).decode(sys.stdout.encoding)
    parts = str(output).split(".com/")[1].split("/")
    html_context["github_repo"] = parts[1].split(".git")[0]
    html_context["github_user"] = parts[0]
    html_context['github_version'] = str(subprocess.check_output(["git rev-parse --abbrev-ref HEAD"], shell=True).decode(sys.stdout.encoding)).strip() + "/"
except Exception as e:
    print("Could not get git information: " + str(e))

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'MirteDocumentation.tex', u'Mirte Documentation Documentation',
     u'Mirte Team', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'mirtedocumentation', u'Mirte Documentation Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'MirteDocumentation', u'Mirte Documentation Documentation',
     author, 'MirteDocumentation', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']



linkcheck_ignore = [r'^http://$', r'^http://mirte.local.*', r'.*localhost.*', r'https://github.com/mirte-robot/mirte-ros-packages/blob/3cbfac4a66425defc56f39b94bafca7794dd227e/mirte_bringup/launch/minimal.launch#L44']
linkcheck_anchors_ignore_for_url = [ # does not work for the current version of sphinx, that's why we use linkcheck_ignore for now
   # Requires JavaScript
   r'https://github.com.*',
   
]
linkcheck_retries=3
